generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  password        String
  image           String?
  countryOfOrigin String?
  xAccountUrl     String?
  linkedinUrl     String?
  sessions        Session[]
  advises         Advise[]
  languages       UserLanguage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id      String   @id @default(cuid())
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Advise {
  id      String @id @default(cuid())
  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLanguage {
  id       String @id @default(cuid())
  userId   String
  language String
  color    String
  logo     String

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Event {
  id          String    @id @default(cuid())
  date        DateTime
  endDate     DateTime?
  name        String
  description String
  city        String // Nombre de la ciudad
  address     String // Dirección específica (calle, número, etc.)
  placeName   String // Nombre del lugar (bar, universidad, etc.)
  flyerSrc    String
  latitude    Float?
  longitude   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  images Image[]
}

model Image {
  id      String  @id @default(cuid())
  imgSrc  String
  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
}
